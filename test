const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// Create a metallic sphere
const geometry = new THREE.TorusGeometry(2.8, 0.6, 100, 100);
let sphereMaterial; // Declare the material outside the textureLoader block

const textureLoader = new THREE.TextureLoader();
textureLoader.load('holo2.png', (texture) => {
    // Create a material with the loaded texture
    sphereMaterial = new THREE.MeshStandardMaterial({
        map: texture, // Apply the texture to the material's map
        metalness: 1, // 100% metallic
        roughness: 0.2, // Some roughness
    });

    createSphere();
});

function createSphere() {
    const sphere = new THREE.Mesh(geometry, sphereMaterial);
    scene.add(sphere);
}

// Create directional light with an initial color and direction
let lightColor = 0xffffff; // Initial white color
const directionalLight = new THREE.DirectionalLight(lightColor, 1);
directionalLight.position.set(1, 1, 1);
scene.add(directionalLight);

// Create an ambient light
const ambientLight = new THREE.AmbientLight(0x404040);
scene.add(ambientLight);

// Handle mouse and touch events to update light color and direction
function handleLightAndSphereUpdates(event) {
    event.preventDefault();
    const clientX = event.clientX || (event.touches && event.touches[0].clientX);
    const clientY = event.clientY || (event.touches && event.touches[0].clientY);

    if (clientX !== undefined && clientY !== undefined) {
        const mouseX = (clientX / window.innerWidth) * 2 - 1;
        const mouseY = -(clientY / window.innerHeight) * 2 + 1;

        // Update light direction based on mouse or touch position
        const newDirection = new THREE.Vector3(mouseX, mouseY, 1);
        directionalLight.position.copy(newDirection);

        lightColor = new THREE.Color(mouseX + 1, mouseY + 1, 1);
        directionalLight.color = lightColor;
    }
}

document.addEventListener('mousemove', handleLightAndSphereUpdates);
document.addEventListener('touchmove', handleLightAndSphereUpdates);

// Set camera position
camera.position.z = 5;
window.addEventListener('resize', () => {
    const newWidth = window.innerWidth;
    const newHeight = window.innerHeight;

    // Update camera aspect ratio and renderer size
    camera.aspect = newWidth / newHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(newWidth, newHeight);
});

// Animation loop
const animate = () => {
    requestAnimationFrame(animate);
    directionalLight.rotation.x += 0.01;
    renderer.render(scene, camera);
};

animate();








const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(100, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);



// const loader = new GLTFLoader();

// loader.load(
// 	// resource URL
// 	'/Users/sam/Desktop/Code/Threejs/Vanilla-Cube/scene(1).gltf',
// 	// called when the resource is loaded
// 	function ( gltf ) {

// 		scene.add( gltf.scene );

// 		gltf.animations; // Array<THREE.AnimationClip>
// 		gltf.scene; // THREE.Group
// 		gltf.scenes; // Array<THREE.Group>
// 		gltf.cameras; // Array<THREE.Camera>
// 		gltf.asset; // Object

// 	}
// 	// called while loading is progressing

// );

let material;

// const loader = new THREE.BufferGeometryLoader();

// load a resource

// = new THREE.MeshStandardMaterial({ 
//   color: 0xffffff,
//   metalness: 0.5, // Set material to fully metallic
//   roughness: 0.2 });

  const textureLoader = new THREE.TextureLoader();
  textureLoader.load('holo2.png', (texture) => {
      // Create a material with the loaded texture
      material = new THREE.MeshStandardMaterial({
          map: texture, // Apply the texture to the material's map
          metalness: 0.8, // 100% metallic
          roughness: 0.2, // Some roughness
      });
      createShapes();
});

// loader.load(
// 	// resource URL
//   'geometry(1).json',

// 	// onLoad callback
// 	function ( geometry ) {
// 		const material = new THREE.MeshLambertMaterial( { 
//       color: 0xF5F5F5 ,

//     } );
// 		const object = new THREE.Mesh( geometry, material );
// 		scene.add( object );
// 	}
  
// );


const loader = new THREE.ObjectLoader();

const geometries = [
    'model(1).json',
    'model(2).json',
    // Add more paths for other geometries...
];

geometries.forEach(geometryPath => {
    loader.load(geometryPath, (loadedObject) => {
        const material = new THREE.MeshLambertMaterial({
            color: 0xF5F5F5,
            metalness: 0.8,
            roughness: 0.2,
        });
        const mesh = new THREE.Mesh(loadedObject.geometry, material);
        scene.add(mesh);
    });
});






const shapes = [
  new THREE.TorusGeometry(1.8, 0.6, 100, 100),
  new THREE.SphereGeometry(2, 32, 32),
  new THREE.CylinderGeometry(2, 2, 4, 32),
  new THREE.TorusGeometry(2, 0.6, 100, 100),
  new THREE.ConeGeometry(2, 4, 32),
  new THREE.DodecahedronGeometry(2)
];

function createShapes(){
  
const yPositions = [0, -10, -20, -30, -40, -50]; // Y positions for shapes
for (let i = 0; i < shapes.length; i++) {
  const geometry = shapes[i];
  const shape = new THREE.Mesh(geometry, material);
  shape.position.y = yPositions[i];
  shape.position.z = -3;


  scene.add(shape);
}

}



// Create directional light with an initial color and direction
let lightColor = 0xffffff; // Initial white color
const directionalLight = new THREE.DirectionalLight(lightColor, 3);
directionalLight.position.set(1, 1, 1);
scene.add(directionalLight);

// Create an ambient light
const ambientLight = new THREE.AmbientLight(0x404040);
scene.add(ambientLight);

// Handle mouse and touch events to update light color and direction
function handleLightAndSphereUpdates(event) {
    event.preventDefault();
    const clientX = event.clientX || (event.touches && event.touches[0].clientX);
    const clientY = event.clientY || (event.touches && event.touches[0].clientY);

    if (clientX !== undefined && clientY !== undefined) {
        const mouseX = (clientX / window.innerWidth) * 2 - 1;
        const mouseY = -(clientY / window.innerHeight) * 2 + 1;

        // Update light direction based on mouse or touch position
        const newDirection = new THREE.Vector3(mouseX, mouseY, 1);
        directionalLight.position.copy(newDirection);

        lightColor = new THREE.Color(mouseX + 1, mouseY + 1, 1);
        directionalLight.color = lightColor;
    }
}

document.addEventListener('mousemove', handleLightAndSphereUpdates);
document.addEventListener('touchmove', handleLightAndSphereUpdates);

// Set camera position
camera.position.z = 5;
window.addEventListener('resize', () => {
    const newWidth = window.innerWidth;
    const newHeight = window.innerHeight;

    // Update camera aspect ratio and renderer size
    camera.aspect = newWidth / newHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(newWidth, newHeight);
});
// Define animation properties
// Define animation properties
const animationDuration = 4000; // in milliseconds
const startY = 0; // Starting y position
const sensitivity = 0.01; // Adjust sensitivity of scroll
const minY = -35; // Minimum y position
const maxY = 0; // Maximum y position

// Function to handle scroll and adjust camera position
const handleScroll = (event) => {
    const deltaY = event.deltaY;

    // Calculate new y position for the camera based on scroll
    let newY = camera.position.y - deltaY * sensitivity;

    // Clamp camera's y position within the specified range
    newY = Math.max(minY, Math.min(newY, maxY));

    camera.position.y = newY;
};

// Add event listener for scroll on the window
window.addEventListener('wheel', handleScroll);


// Animation loop
const animate = () => {
    requestAnimationFrame(animate);
     // Rotate shapes around their X-axis
     scene.traverse((object) => {
      if (object instanceof THREE.Mesh) {
          object.rotation.y += Math.random() * 0.01; // Adjust rotation speed as needed
      }
  });

    renderer.render(scene, camera);
};

animate();

